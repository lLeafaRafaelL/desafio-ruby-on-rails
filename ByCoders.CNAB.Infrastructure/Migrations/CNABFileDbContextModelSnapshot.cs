// <auto-generated />
using System;
using ByCoders.CNAB.Infrastructure.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ByCoders.CNAB.Infrastructure.Migrations
{
    [DbContext(typeof(CNABFileDbContext))]
    partial class CNABFileDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ByCoders.CNAB.Domain.Files.Models.CNABFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar")
                        .HasColumnName("errormessage");

                    b.Property<DateTime?>("FailedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("failedon");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("filename");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar")
                        .HasColumnName("filepath");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("filesize");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("processedon");

                    b.Property<DateTime?>("ProcessingStartedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("processingstartedon");

                    b.Property<int>("TransactionCount")
                        .HasColumnType("integer")
                        .HasColumnName("transactioncount");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("uploadedon");

                    b.HasKey("Id")
                        .HasName("pk_cnabfiles");

                    b.HasIndex("FailedOn")
                        .HasDatabaseName("ix_cnabfiles_failedon");

                    b.HasIndex("FilePath")
                        .IsUnique()
                        .HasDatabaseName("ix_cnabfiles_filepath");

                    b.HasIndex("ProcessedOn")
                        .HasDatabaseName("ix_cnabfiles_processedon");

                    b.HasIndex("UploadedOn")
                        .HasDatabaseName("ix_cnabfiles_uploadedon");

                    b.ToTable("cnabfiles", (string)null);
                });

            modelBuilder.Entity("ByCoders.CNAB.Domain.Transactions.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AmountCNAB")
                        .HasColumnType("numeric")
                        .HasColumnName("amountcnab");

                    b.Property<Guid?>("CNABFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("cnabfileid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdon");

                    b.Property<DateTimeOffset>("TransactionDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("transactiondatetime");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("transactiontypeid");

                    b.Property<int>("TransactionTypeId1")
                        .HasColumnType("integer")
                        .HasColumnName("transactiontypeid1");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("CNABFileId")
                        .HasDatabaseName("ix_transactions_cnabfileid");

                    b.HasIndex("TransactionDateTime")
                        .IsDescending()
                        .HasDatabaseName("ix_transactions_transactiondatetime");

                    b.HasIndex("TransactionTypeId1")
                        .HasDatabaseName("ix_transactions_transactiontypeid1");

                    b.ToTable("transactions", (string)null);

                    b.HasDiscriminator<int>("TransactionTypeId");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ByCoders.CNAB.Domain.Transactions.Models.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("description");

                    b.Property<byte>("Nature")
                        .HasColumnType("smallint")
                        .HasColumnName("nature");

                    b.HasKey("Id")
                        .HasName("pk_transactiontypes");

                    b.ToTable("transactiontypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Debit",
                            Nature = (byte)1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Bank Slip",
                            Nature = (byte)2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Funding",
                            Nature = (byte)2
                        },
                        new
                        {
                            Id = 4,
                            Description = "Credit",
                            Nature = (byte)1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Loan Receipt",
                            Nature = (byte)1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Sales",
                            Nature = (byte)1
                        },
                        new
                        {
                            Id = 7,
                            Description = "TED Receipt",
                            Nature = (byte)1
                        },
                        new
                        {
                            Id = 8,
                            Description = "DOC Receipt",
                            Nature = (byte)1
                        },
                        new
                        {
                            Id = 9,
                            Description = "Rent",
                            Nature = (byte)2
                        });
                });

            modelBuilder.Entity("ByCoders.CNAB.Domain.Transactions.Models.BankSlip", b =>
                {
                    b.HasBaseType("ByCoders.CNAB.Domain.Transactions.Models.Transaction");

                    b.ToTable("transactions", (string)null);

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("ByCoders.CNAB.Domain.Transactions.Models.Credit", b =>
                {
                    b.HasBaseType("ByCoders.CNAB.Domain.Transactions.Models.Transaction");

                    b.ToTable("transactions", (string)null);

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("ByCoders.CNAB.Domain.Transactions.Models.DOCReceipt", b =>
                {
                    b.HasBaseType("ByCoders.CNAB.Domain.Transactions.Models.Transaction");

                    b.ToTable("transactions", (string)null);

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("ByCoders.CNAB.Domain.Transactions.Models.Debit", b =>
                {
                    b.HasBaseType("ByCoders.CNAB.Domain.Transactions.Models.Transaction");

                    b.ToTable("transactions", (string)null);

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ByCoders.CNAB.Domain.Transactions.Models.Funding", b =>
                {
                    b.HasBaseType("ByCoders.CNAB.Domain.Transactions.Models.Transaction");

                    b.ToTable("transactions", (string)null);

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("ByCoders.CNAB.Domain.Transactions.Models.LoanReceipt", b =>
                {
                    b.HasBaseType("ByCoders.CNAB.Domain.Transactions.Models.Transaction");

                    b.ToTable("transactions", (string)null);

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("ByCoders.CNAB.Domain.Transactions.Models.Rent", b =>
                {
                    b.HasBaseType("ByCoders.CNAB.Domain.Transactions.Models.Transaction");

                    b.ToTable("transactions", (string)null);

                    b.HasDiscriminator().HasValue(9);
                });

            modelBuilder.Entity("ByCoders.CNAB.Domain.Transactions.Models.Sale", b =>
                {
                    b.HasBaseType("ByCoders.CNAB.Domain.Transactions.Models.Transaction");

                    b.ToTable("transactions", (string)null);

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("ByCoders.CNAB.Domain.Transactions.Models.TEDReceipt", b =>
                {
                    b.HasBaseType("ByCoders.CNAB.Domain.Transactions.Models.Transaction");

                    b.ToTable("transactions", (string)null);

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("ByCoders.CNAB.Domain.Transactions.Models.Transaction", b =>
                {
                    b.HasOne("ByCoders.CNAB.Domain.Transactions.Models.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_transactiontypes_transactiontypeid1");

                    b.OwnsOne("ByCoders.CNAB.Domain.Transactions.Models.Beneficiary", "Beneficiary", b1 =>
                        {
                            b1.Property<Guid>("TransactionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Document")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("varchar")
                                .HasColumnName("beneficiary_document");

                            b1.HasKey("TransactionId");

                            b1.ToTable("transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId")
                                .HasConstraintName("fk_transactions_transactions_id");
                        });

                    b.OwnsOne("ByCoders.CNAB.Domain.Transactions.Models.Card", "Card", b1 =>
                        {
                            b1.Property<Guid>("TransactionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(12)
                                .HasColumnType("varchar")
                                .HasColumnName("card_number");

                            b1.HasKey("TransactionId");

                            b1.ToTable("transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId")
                                .HasConstraintName("fk_transactions_transactions_id");
                        });

                    b.OwnsOne("ByCoders.CNAB.Domain.Transactions.Models.Store", "Store", b1 =>
                        {
                            b1.Property<Guid>("TransactionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(19)
                                .HasColumnType("varchar")
                                .HasColumnName("store_name");

                            b1.Property<string>("Owner")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("varchar")
                                .HasColumnName("store_owner");

                            b1.HasKey("TransactionId");

                            b1.HasIndex("Name")
                                .IsUnique()
                                .HasDatabaseName("ix_transactions_store_name");

                            b1.ToTable("transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId")
                                .HasConstraintName("fk_transactions_transactions_id");
                        });

                    b.Navigation("Beneficiary")
                        .IsRequired();

                    b.Navigation("Card")
                        .IsRequired();

                    b.Navigation("Store")
                        .IsRequired();

                    b.Navigation("TransactionType");
                });
#pragma warning restore 612, 618
        }
    }
}
